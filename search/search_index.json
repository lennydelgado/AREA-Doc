{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":"<p>To begin with, in order to use the project, you need to clone it using the following command:</p> <pre><code>git clone git@github.com:EpitechPromo2026/B-CPP-500-MAR-5-1-rtype-theo.liennard.git\n</code></pre> <p>Once you have obtained the project, navigate to it to install the dependencies.</p>"},{"location":"#dependency-installation","title":"Dependency Installation","text":"<p>The installation of dependencies varies significantly depending on the operating system used.</p> <p>Before proceeding, you need to install conan, which is an open-source tool that facilitates the installation of external C/C++ libraries.</p> <p>To install it, visit https://conan.io/downloads</p> <p>Install conan according to your operating system or the method you prefer to use.</p> <p>To verify its installation, you can now execute the following command, which allows conan to detect the version of the compiler you are using and several other necessary pieces of information for its operation.</p> <p>Note</p> <p>This command must be executed in the project directory, not elsewhere.</p> <pre><code>conan profile detect --force\n</code></pre> <p>Once this is done, you need to prepare the files to install the dependencies.</p> <pre><code>conan install . --output-folder=build --build=missing\n</code></pre> <p>Warning</p> <p>You may encounter an error during the execution of this command. If this is the case, you must execute the following command:</p> <pre><code>    conan config home\n</code></pre> <p>then add the following lines to the global.conf file in folder that was returned by the previous command:</p> <pre><code>    tools.system.package_manager:mode=install\n    tools.system.package_manager:sudo=True\n</code></pre> For Linux and MacOSFor Windows <p>To complete the installation of dependencies, execute the following commands. First, navigate to the build directory.</p> <pre><code>cd build\n</code></pre> <p>Then, proceed to install the dependencies.</p> <pre><code>cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release\n</code></pre> <p>Now, you can initiate the project compilation with the following command:</p> <p>Note</p> <p>To execute this command, you must be in the build directory.</p> <pre><code>cmake --build .\n</code></pre> <p>To complete the installation of dependencies, execute the following commands. First, navigate to the build directory.</p> <pre><code>cd build\n</code></pre> <p>Then, proceed to install the dependencies.</p> <pre><code># assuming Visual Studio 15 2017 is your VS version and that it matches your default profile\ncmake .. -G \"Visual Studio 15 2017\" -DCMAKE_TOOLCHAIN_FILE=./conan_toolchain.cmake\n</code></pre> <p>Now, you can initiate the project compilation with the following command:</p> <p>Note</p> <p>To execute this command, you must be in the build directory.</p> <pre><code>cmake --build . --config Release\n</code></pre>"},{"location":"GameDesign/gameDesign/","title":"Getting started","text":""},{"location":"GameDesign/gameDesign/#wip","title":"WIP","text":"<p>IN WIP</p>"},{"location":"GameEngine/gameEngine/","title":"Getting started","text":""},{"location":"GameEngine/gameEngine/#game-engine","title":"Game Engine","text":""},{"location":"GameEngine/gameEngine/#structure","title":"Structure","text":"<p>Old Diagram <pre><code>stateDiagram-v2\n    direction LR\n    state Game {\n        direction LR\n        [*] --&gt; GameEngine\n        state GameEngine {\n            direction LR\n            [*] --&gt; Registry\n            [*] --&gt; Network\n            state Registry {\n                direction LR\n                Entity --&gt; System: is passed to\n                state Entity {\n                    [Components...]\n                }\n                state System {\n                    void(Registry&amp;,sparseArray&lt;&gt;...)\n                }\n            }\n\n            state Network {\n                []\n            }\n        }\n    }</code></pre></p> <p>Real Diagram <pre><code>stateDiagram-v2\n    state Game {\n        direction LR\n        state GameLogic {\n            direction LR\n            player\n            ennemy\n            ...\n        }\n        state GameEngine {\n            state ECS {\n                state Entity {\n                    direction LR\n                    [Components...]\n                }\n                Entity --&gt; System\n            }\n            state Network {\n                direction LR\n                NotDone\n            }\n            state Event {\n                state TODO {\n                    direction LR\n                    onKeyPress\n                    onKeyReleased\n                    isKeyPressed\n                }\n            }\n            state Render {\n                direction LR\n                state SFML {\n                    direction LR\n                    2D\n                    3D\n                }\n            }\n        }\n    }</code></pre></p>"},{"location":"Network/network/","title":"Getting started","text":""},{"location":"Network/network/#descpription","title":"Descpription","text":"<p>This library is used to create a server and a client. it provides a simple interface to send and receive any kind of data.</p> <p>the network interface is based on the asio library.</p> <p>it is working on all platforms and is fully costumisable.</p>"},{"location":"Network/network/#usage","title":"Usage","text":"<p>To use the Flib, you have to create custom DataTypes. Here is an example:</p> <p><pre><code>    enum class CustomMsgTypes : uint32_t\n{\nPlayerData,\nFireBullet,\nMovePlayer,\nPlayerHealth\n};\n</code></pre> This is basicly an enum that you can use to implement different behaviors.</p> <p>Those DataTypes will be used in the Networking implementation. Go to Data Transfer for more details.</p> <p>Now, you can send datas using the \"message\" class</p> <p>For the server, you can use messageClient and in the client A compl\u00e9ter.</p>"},{"location":"Network/network/#message-class","title":"message Class","text":"<p><pre><code>template &lt;typename T&gt;\nstruct messageHeader\n{\nT id{}; // {} = default value / constructor for class\nsize_t size = 0;\n};\n\ntemplate &lt;typename T&gt;\nstruct message\n{\nmessageHeader&lt;T&gt; header;\nstd::vector&lt;uint8_t&gt; body;\n};\n</code></pre> This is the basic structure of a message. The <code>messageHeader</code> contains the custom data type that we created earlier. Thanks to the <code>id{}</code> syntaxe, it can be any type of data, even struct or class (in those cases the constructor will be called by default).</p>"},{"location":"Network/network/#create-a-message","title":"Create a message","text":"<pre><code>    net::message&lt;CustomMsgTypes&gt; msg;\nmsg.header.id = CustomMsgTypes::PlayerData;\n</code></pre>"},{"location":"Network/network/#fill-a-message","title":"Fill a message","text":"<pre><code>    int a = 5;\nfloat b = 3.14f;\nstruct\n{\nint a;\nint b;\n} data[5];\n\nmsg &lt;&lt; a &lt;&lt; b &lt;&lt; data;\n</code></pre>"},{"location":"Network/network/#extract-data-from-a-message","title":"Extract data from a message","text":"<p><pre><code>    int a;\nfloat b;\nstruct\n{\nint a;\nint b;\nfloat c;\n} data[5];\n\nmsg &gt;&gt; data &gt;&gt; b &gt;&gt; a;\n</code></pre> As you can see we filled the message in the order [a -&gt; b -&gt; data]</p> <p>And then we extracted the data in the order [data -&gt; b -&gt; a]</p> <p>This is because the message structure works like a pile. So the last item we put in the message will be the first one we extract.</p>"},{"location":"Network/network/#client","title":"Client","text":""},{"location":"Network/network/#server","title":"Server","text":"<p><pre><code>Server::Server(int port);\n</code></pre> this method will create a server on the given port</p>"},{"location":"Network/network/#serverstart","title":"Server::start()","text":"<p><pre><code>bool Server::start();\n</code></pre> this method will start the server</p> <p>if an error occurs it will throw an exception and print the error message on the error output</p> <p>then it will return false</p> <p>otherwise it will return true and the server will be running</p>"},{"location":"Network/network/#serverstop","title":"Server::stop()","text":"<p><pre><code>void Server::stop();\n</code></pre> this method will stop the server</p>"},{"location":"Server/server/","title":"[Aspect du Projet]","text":""},{"location":"Server/server/#introduction","title":"Introduction","text":"<p>Cette section doit fournir une br\u00e8ve introduction \u00e0 l'aspect sp\u00e9cifique du projet, tel que le Game Engine ou la fonctionnalit\u00e9 R\u00e9seau. Expliquez son importance et comment il s'int\u00e8gre dans l'ensemble du projet.</p>"},{"location":"Server/server/#objectif","title":"Objectif","text":"<p>D\u00e9crivez le principal objectif ou la principale finalit\u00e9 de cet aspect du projet. Quel probl\u00e8me r\u00e9sout-il et pourquoi est-il essentiel pour la r\u00e9ussite du projet ?</p>"},{"location":"Server/server/#vue-architecturale","title":"Vue Architecturale","text":"<p>Fournissez un aper\u00e7u architectural de haut niveau de cet aspect du projet. Utilisez des diagrammes, des graphiques ou des supports visuels pour illustrer les principaux composants et leur interaction.</p>"},{"location":"Server/server/#principaux-systemes","title":"Principaux Syst\u00e8mes","text":"<p>Expliquez les principaux syst\u00e8mes ou sous-syst\u00e8mes au sein de cet aspect du projet et comment ils contribuent \u00e0 sa fonctionnalit\u00e9.</p>"},{"location":"Server/server/#premiers-pas","title":"Premiers Pas","text":"<p>Incluez des instructions pour la configuration et la mise en place de cet aspect du projet. Liste des d\u00e9pendances, des exigences ou des plates-formes prises en charge sp\u00e9cifiques \u00e0 cet aspect. Offrez des conseils sur la construction et l'utilisation de ce composant. Fournissez des \u00e9tapes d'installation ou de configuration n\u00e9cessaires.</p>"},{"location":"Server/server/#tutoriels-et-guides","title":"Tutoriels et Guides","text":"<p>Incluez des tutoriels et des guides pratiques pour travailler avec cet aspect du projet. Il peut s'agir d'instructions \u00e9tape par \u00e9tape, d'exemples de code ou de sc\u00e9narios d'utilisation.</p>"},{"location":"Server/server/#directives-de-contribution","title":"Directives de Contribution","text":"<p>D\u00e9finissez les directives pour contribuer \u00e0 cet aspect sp\u00e9cifique du projet. Incluez des informations sur les conventions de codage, les processus et les attentes pour les d\u00e9veloppeurs qui souhaitent travailler sur cette partie du projet.</p>"},{"location":"Server/server/#documentation-du-protocole-le-cas-echeant","title":"Documentation du Protocole (le cas \u00e9ch\u00e9ant)","text":"<p>Si cet aspect du projet implique un protocole de communication (par exemple, pour la communication r\u00e9seau), fournissez une documentation d\u00e9taill\u00e9e sur le protocole. Cela devrait inclure :</p> <ul> <li>Une description des commandes et des paquets utilis\u00e9s dans la communication.</li> <li>Toute documentation formelle, telle qu'une RFC (Request for Comments), le cas \u00e9ch\u00e9ant.</li> <li>Des exemples de comment utiliser le protocole pour interagir avec le composant.</li> </ul>"},{"location":"Server/server/#auteurscontacts","title":"Auteurs/Contacts","text":"<p>Listez les auteurs ou les membres de l'\u00e9quipe responsables du d\u00e9veloppement et de la maintenance de cet aspect du projet. Incluez des informations de contact ou des liens vers leurs profils si n\u00e9cessaire.</p>"},{"location":"Server/server/#liens-utiles","title":"Liens Utiles","text":"<p>Fournissez des liens vers des ressources pertinentes, telles que des documents connexes, des biblioth\u00e8ques ou des r\u00e9f\u00e9rences externes qui peuvent aider les d\u00e9veloppeurs \u00e0 comprendre et \u00e0 travailler avec cet aspect du projet.</p>"},{"location":"Server/server/#conclusion","title":"Conclusion","text":"<p>R\u00e9sumez les points cl\u00e9s de la documentation de cet aspect et r\u00e9it\u00e9rez son importance dans le cadre du projet. Mentionnez d'\u00e9ventuels d\u00e9veloppements ou am\u00e9liorations futurs.</p> <p>H\u00e9sitez pas \u00e0 regarder comment faire dans les fichiers markdown si vous voulait faire des truc un peux sytl\u00e9 pour savoir les package qu'on a il sont:     - pymdownx     - material-mkdocs</p>"}]}