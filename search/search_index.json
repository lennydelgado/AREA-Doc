{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":"<p>To begin with, in order to use the project, you need to clone it using the following command:</p> <pre><code>git clone git@github.com:EpitechPromo2026/B-CPP-500-MAR-5-1-rtype-theo.liennard.git\n</code></pre> <p>Once you have obtained the project, navigate to it to install the dependencies.</p>"},{"location":"#dependency-installation","title":"Dependency Installation","text":"<p>The installation of dependencies varies significantly depending on the operating system used.</p> <p>Before proceeding, you need to install conan, which is an open-source tool that facilitates the installation of external C/C++ libraries.</p> <p>To install it, visit https://conan.io/downloads</p> <p>Install conan according to your operating system or the method you prefer to use.</p> <p>To verify its installation, you can now execute the following command, which allows conan to detect the version of the compiler you are using and several other necessary pieces of information for its operation.</p> <p>Note</p> <p>This command must be executed in the project directory, not elsewhere.</p> <pre><code>conan profile detect --force\n</code></pre> <p>Once this is done, you need to prepare the files to install the dependencies.</p> <pre><code>conan install . --output-folder=build --build=missing\n</code></pre> <p>Warning</p> <p>You may encounter an error during the execution of this command. If this is the case, you must execute the following command:</p> <pre><code>    conan config home\n</code></pre> <p>then add the following lines to the global.conf file in folder that was returned by the previous command:</p> <pre><code>    tools.system.package_manager:mode=install\n    tools.system.package_manager:sudo=True\n</code></pre> For Linux and MacOSFor Windows <p>To complete the installation of dependencies, execute the following commands. First, navigate to the build directory.</p> <pre><code>cd build\n</code></pre> <p>Then, proceed to install the dependencies.</p> <pre><code>cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release\n</code></pre> <p>Now, you can initiate the project compilation with the following command:</p> <p>Note</p> <p>To execute this command, you must be in the build directory.</p> <pre><code>cmake --build .\n</code></pre> <p>To complete the installation of dependencies, execute the following commands. First, navigate to the build directory.</p> <pre><code>cd build\n</code></pre> <p>Then, proceed to install the dependencies.</p> <pre><code># assuming Visual Studio 15 2017 is your VS version and that it matches your default profile\ncmake .. -G \"Visual Studio 15 2017\" -DCMAKE_TOOLCHAIN_FILE=./conan_toolchain.cmake\n</code></pre> <p>Now, you can initiate the project compilation with the following command:</p> <p>Note</p> <p>To execute this command, you must be in the build directory.</p> <pre><code>cmake --build . --config Release\n</code></pre>"},{"location":"GameDesign/gameDesign/","title":"Getting started","text":""},{"location":"GameDesign/gameDesign/#wip","title":"WIP","text":"<p>IN WIP</p>"},{"location":"GameEngine/gameEngine/","title":"Getting started","text":""},{"location":"GameEngine/gameEngine/#wip","title":"WIP","text":"<p>IN Kenan WIP</p>"},{"location":"Network/network/","title":"Network","text":""},{"location":"Network/network/#descpription","title":"Descpription","text":"<p>This library is used to create a server and a client. it provides a simple interface to send and receive any kind of data.</p> <p>the network interface is based on the asio library.</p> <p>it is working on all platforms and is fully costumisable.</p>"},{"location":"Network/network/#usage","title":"Usage","text":"<p>To use the Flib, you have to create custom DataTypes. Here is an example:</p> <p><pre><code>    enum class CustomMsgTypes : uint32_t\n{\nPlayerData,\nFireBullet,\nMovePlayer,\nPlayerHealth\n};\n</code></pre> This is basicly an enum that you can use to implement different behaviors.</p> <p>Those DataTypes will be used in the Networking implementation. Go to Data Transfer for more details.</p> <p>Now, you can send datas using the \"message\" class</p> <p>For the server, you can use messageClient and in the client A compl\u00e9ter.</p>"},{"location":"Network/network/#message-class","title":"message Class","text":"<p><pre><code>template &lt;typename T&gt;\nstruct messageHeader\n{\nT id{}; // {} = default value / constructor for class\nsize_t size = 0;\n};\n\ntemplate &lt;typename T&gt;\nstruct message\n{\nmessageHeader&lt;T&gt; header;\nstd::vector&lt;uint8_t&gt; body;\n};\n</code></pre> This is the basic structure of a message. The <code>messageHeader</code> contains the custom data type that we created earlier. Thanks to the <code>id{}</code> syntaxe, it can be any type of data, even struct or class (in those cases the constructor will be called by default).</p>"},{"location":"Network/network/#create-a-message","title":"Create a message","text":"<pre><code>    net::message&lt;CustomMsgTypes&gt; msg;\nmsg.header.id = CustomMsgTypes::PlayerData;\n</code></pre>"},{"location":"Network/network/#fill-a-message","title":"Fill a message","text":"<pre><code>    int a = 5;\nfloat b = 3.14f;\nstruct\n{\nint a;\nint b;\n} data[5];\n\nmsg &lt;&lt; a &lt;&lt; b &lt;&lt; data;\n</code></pre>"},{"location":"Network/network/#extract-data-from-a-message","title":"Extract data from a message","text":"<p><pre><code>    int a;\nfloat b;\nstruct\n{\nint a;\nint b;\nfloat c;\n} data[5];\n\nmsg &gt;&gt; data &gt;&gt; b &gt;&gt; a;\n</code></pre> As you can see we filled the message in the order [a -&gt; b -&gt; data]</p> <p>And then we extracted the data in the order [data -&gt; b -&gt; a]</p> <p>This is because the message structure works like a pile. So the last item we put in the message will be the first one we extract.</p>"},{"location":"Network/network/#client","title":"Client","text":""},{"location":"Network/network/#server","title":"Server","text":"<p><pre><code>Server::Server(int port);\n</code></pre> this method will create a server on the given port</p>"},{"location":"Network/network/#serverstart","title":"Server::start()","text":"<p><pre><code>bool Server::start();\n</code></pre> this method will start the server</p> <p>if an error occurs it will throw an exception and print the error message on the error output</p> <p>then it will return false</p> <p>otherwise it will return true and the server will be running</p>"},{"location":"Network/network/#serverstop","title":"Server::stop()","text":"<p><pre><code>void Server::stop();\n</code></pre> this method will stop the server</p>"},{"location":"Server/server/","title":"Getting started","text":""},{"location":"Server/server/#wip","title":"WIP","text":"<p>IN TEST WIP</p>"}]}